# -*- coding: utf-8 -*-
"""visualization-covid19-georgia.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PU5iCNTctiAFJFgevlg3ez65cZ1r2P96

# Step 1: Load in Packages
"""

###################################
# the below lines are related #####
# to loading and performing basic #
# transformations of the data #####
###################################

## importing pandas
import pandas as pd 

## importing NumPy fro mathematical functions
import numpy as np 

## print command to make sure it has been imported
print('cell successfully ran')

######################################
# loading in visualization packages ##
# to help create visuals of the data #
######################################

## importing seaborn, matplotlib, and plotly for statistical visualizations
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px

## setting theme/style for seaborn - makes your visuals look nicer
sns.set_theme(style='whitegrid')

## print command to make sure it has been imported
print('cell successfully ran')

"""# Loading in and Modifying Data """

# import csv dataset
df = pd.read_csv('https://raw.githubusercontent.com/Brittanykusi/AHI_Microcourse_Visualization/main/Data/Georgia_COVID/Georgia_COVID-19_Case_Data.csv')

# display dataset
df

# number of rows in dataset
len(df)

# number of rows and columns
df.shape

"""## Describing the Variables"""

# data type of each column + count of non-null values in dataset
df.info()

# list of column names
list(df)

# list if values in a columns and the frequency at which they appear in the column
df['COUNTY'].value_counts()

#creating a new variable to store the count of counties
df_counties = df['COUNTY'].value_counts()

# displaying the dataset from the top - 20 is the amount of rows we want to see
df_counties.head(20)

"""## Transforming Columns"""

df['DATESTAMP']

# creating a copy of the existing column, so we keep the original version
# we could also override the column if we wanted to, but because we are unsure
# where we are going to take the analysis - lets just keep it
df['DATESTAMP_MOD'] = df['DATESTAMP']
print(df['DATESTAMP_MOD'].head(10))

# displaying the datatype of column values
print(df['DATESTAMP_MOD'].dtypes)

df

# changing the data type of the 
df['DATESTAMP_MOD'] = pd.to_datetime(df['DATESTAMP_MOD'])
df['DATESTAMP_MOD'].dtypes

# compare the 2 columns
df[['DATESTAMP','DATESTAMP_MOD']]

# extract the day and create a new column
df['DATESTAMP_MOD_DAY'] = df['DATESTAMP_MOD'].dt.date
df['DATESTAMP_MOD_DAY']

# extract the year and create a new column
df['DATESTAMP_MOD_YEAR'] = df['DATESTAMP_MOD'].dt.year

#extract the month and create a new column
df['DATESTAMP_MOD_MONTH'] = df['DATESTAMP_MOD'].dt.month

# year 
df['DATESTAMP_MOD_YEAR']

# month 
df['DATESTAMP_MOD_MONTH']

df

# combine month and year into one column
df['DATESTAMP_MOD_MONTH_YEAR'] = df['DATESTAMP_MOD'].dt.to_period('M')

# sort values
df['DATESTAMP_MOD_MONTH_YEAR'].sort_values()

df

# extract the week and create a new column

df['DATESTAMP_MOD_WEEK'] = df['DATESTAMP_MOD'].dt.week
df['DATESTAMP_MOD_WEEK']

# combine quarter and year into one column
df['DATESTAMP_MOD_QUARTER'] = df['DATESTAMP_MOD'].dt.to_period('Q')

# sort values
df['DATESTAMP_MOD_QUARTER'].sort_values()

# creating new columns for week and day as a string for easier frequency counts
df['DATESTAMP_MOD_DAY_STRING'] = df['DATESTAMP_MOD_DAY'].astype(str)
df['DATESTAMP_MOD_WEEK_STRING'] = df['DATESTAMP_MOD_WEEK'].astype(str)
df['DATETIME_STRING'] = df['DATESTAMP_MOD_MONTH_YEAR'].astype(str)

df

"""## Getting the counties required for our anlysis

We know that the counties we want to analyze are:
- Cobb
- DekaLb
- Fulton
- Gwinnett
- Hall
"""

df['COUNTY']

# creating a list variable that is going to contain all of the counties we want
countList =['COBB','DEKALB', 'FULTON', 'GWINNETT', 'HALL']
countList

# create a filtered view of our dataframe based on our counties
selectCounties = df[df['COUNTY'].isin(countList)]
len(selectCounties)

"""## Getting just the specific date/time frame we want

`dataframe` = length ~ 90,000

`selectCounties` = Length 2,830

`selectCountyTime` = ???
"""

# create a new dataset that can be further filtered
selectCountyTime = selectCounties

selectCountyTime['DATESTAMP_MOD_MONTH_YEAR']

# filter out april 2020
selectCountTime_april2020 = selectCountyTime[selectCountyTime['DATESTAMP_MOD_MONTH_YEAR'] == '2020-04']
len(selectCountTime_april2020)

# filter out april and may 2020
selectCountTime_aprilmay2020 = selectCountyTime[(selectCountyTime['DATESTAMP_MOD_MONTH_YEAR'] == '2020-05') | (selectCountyTime['DATESTAMP_MOD_MONTH_YEAR'] == '2020-04')]
len(selectCountTime_aprilmay2020)

selectCountTime_aprilmay2020.head(50)

"""## Creating the final dataframe / specific columns-features-attributes that we care about"""

finaldf = selectCountTime_aprilmay2020[[
    'COUNTY', 
    'DATESTAMP_MOD',
    'DATESTAMP_MOD_DAY',
    'DATESTAMP_MOD_DAY_STRING',
    'DATETIME_STRING',
    'DATESTAMP_MOD_MONTH_YEAR',
    'C_New', #cases - new
    'C_Cum', #caes - total
    'H_New', #hospitalizations - new
    'H_Cum', #hospitalizations - total
    'D_New', #deaths - new
    'D_Cum' #deaths - total
]]

finaldf

"""# Looking at total covid cases by month"""

# drop duplicated rows
# subset -- which columns we are looking at
# keep -- which diplicate do we want to keep - in this case its the last one because the dataset provides frequency counts
finaldf_dropdups = finaldf.drop_duplicates(subset=['COUNTY', 'DATETIME_STRING'], keep='last')
finaldf_dropdups

#create pivot table for cum counts (FINALL CUM COUNTS OF COVID AT THE END OF APRIL AND MAY)
# values = what we want to get a count of 
pd.pivot_table(finaldf_dropdups, values='C_Cum', index=['COUNTY'], columns=['DATESTAMP_MOD_MONTH_YEAR'], aggfunc=np.sum)

# seaborn graph
vis1 = sns.barplot(x='DATESTAMP_MOD_MONTH_YEAR', y='C_Cum', data=finaldf_dropdups)

# plotly1 graph
plotly1 = px.bar(finaldf_dropdups, x='DATETIME_STRING', y='C_Cum', color='COUNTY', barmode='group')
plotly1.show()

plotly2 = px.bar(finaldf_dropdups, x='DATETIME_STRING', y='C_Cum', color='COUNTY', barmode='stack')
plotly2.show()

"""## Looking at total covid cases by DAY"""

daily = finaldf
daily
len(daily)

pd.pivot_table(daily, values='C_Cum', index='COUNTY', columns=['DATESTAMP_MOD_DAY'], aggfunc=np.sum)

tempdf = pd.pivot_table(daily, values='C_Cum', 
                        index='DATESTAMP_MOD_DAY', columns=['COUNTY'], aggfunc=np.sum)
tempdf.head(50)

# creating variable that we can use as filters
startdate = pd.to_datetime('2020-04-26').date()
enddate = pd.to_datetime('2020-05-09').date()

maskFilter = (daily['DATESTAMP_MOD_DAY']>= startdate) & (daily['DATESTAMP_MOD_DAY']<= enddate)
dailySpecific = daily.loc[maskFilter]
dailySpecific

dailySpecific[dailySpecific['COUNTY'] == 'FULTON']

vis3 = sns.lineplot(data=dailySpecific, x='DATESTAMP_MOD_DAY', y='C_Cum')

vis4 = sns.lineplot(data=dailySpecific, x='DATESTAMP_MOD_DAY', y='C_Cum', hue='COUNTY')

plotly3 = px.bar(dailySpecific, x='DATESTAMP_MOD_DAY', y='C_Cum', color='COUNTY')
plotly3.show()

plotly4 = px.bar(dailySpecific, x='DATESTAMP_MOD_DAY', y='H_New', color='COUNTY', barmode='group')
plotly4.show()

plotly5 = px.bar(dailySpecific, x='DATESTAMP_MOD_DAY', y='H_Cum', color='COUNTY', barmode='group')
plotly5.show()

plotly6 = px.bar(dailySpecific, x='DATESTAMP_MOD_DAY', y='D_New', color='COUNTY', barmode='group')
plotly6.show()

plotly7 = px.bar(dailySpecific, x='DATESTAMP_MOD_DAY', y='D_Cum', color='COUNTY', barmode='group')
plotly7.show()

dailySpecific['newhospandDeathCovid'] = dailySpecific['D_New'].astype(int) + dailySpecific['H_New'].astype(int) + dailySpecific['C_New'].astype(int)
dailySpecific['newhospandDeathCovid']

dailySpecific['newhospandDeath'] = dailySpecific['D_New'].astype(int) + dailySpecific['H_New'].astype(int)
dailySpecific['newhospandDeath']

dailySpecific

plotly8 = px.bar(dailySpecific, 
                 x='DATESTAMP_MOD_DAY', 
                 y='newhospandDeathCovid', 
                 color='COUNTY', 
                 title='Georgia 2020 COVID Data: Total New Hospitilizations, Deaths, and COVID cases by County',# change title
                 labels={
                     'DATESTAMP_MOD_DAY': 'Time (Month, Day, year)',
                     'newhospandDeathCovid': 'Total Count'# change axis names
                 },
                 barmode='group')# how the data in displayed

#fix laypout so that dates appear under each time period on the x-axis
plotly8.update_layout(
    xaxis = dict(
        tickmode='linear',
        type='category'
    )
)


plotly8.show()